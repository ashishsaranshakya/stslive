// Segree Even odd

import java.util.*;
public class Main
{
	// Head of list
	Node head; 

	// Linked list Node
	class Node
	{
		int data;
		Node next;
		Node(int d)
		{
			data = d;
			next = null;
		}
	}

	void segregateEvenOdd()
	{
		Node end = head;
		Node prev = null;
		Node curr = head;


		while (end.next != null)
			end = end.next;

		Node new_end = end;

		
		while (curr.data % 2 !=0 && 
			curr != end)
		{
			new_end.next = curr;
			curr = curr.next;
			new_end.next.next = null;
			new_end = new_end.next;
		}

		
		if (curr.data % 2 == 0)
		{
			head = curr;

			// Now curr points to first even node
			while (curr != end)
			{
				if (curr.data % 2 == 0)
				{
					prev = curr;
					curr = curr.next;
				}
				else
				{
					/* Break the link between prev 
					and curr*/
					prev.next = curr.next;

					// Make next of curr as null 
					curr.next = null;

					// Move curr to end 
					new_end.next = curr;

					// Make curr as new end of list 
					new_end = curr;

					// Update curr pointer 
					curr = prev.next;
				}
			}
		}

		
		else prev = curr;

		if (new_end != end && 
			end.data %2 != 0)
		{
			prev.next = end.next;
			end.next = null;
			new_end.next = end;
		}
	}


	void push(int new_data)
	{
		/* 1 & 2: Allocate the Node &
				Put in the data*/
		Node new_node = new Node(new_data);

		// 3. Make next of new Node as head 
		new_node.next = head;

		// 4. Move the head to point to 
		// new Node 
		head = new_node;
	}

	
	void printList()
	{
		Node temp = head;
		while(temp != null)
		{
			System.out.print(temp.data + " ");
			temp = temp.next;
		}
		System.out.println();
	}

	
	public static void main(String args[])
	{
		Main main = new Main();
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        for (int i = 0; i < n; i++) {
            int m = sc.nextInt();
            main.push(m);
        }
        main.segregateEvenOdd();
        main.printList();
	}
} 
